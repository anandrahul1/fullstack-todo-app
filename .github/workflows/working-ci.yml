name: Working CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Run frontend tests
      run: npm run test:frontend
    
    - name: Start server for E2E tests
      run: |
        echo "Starting server..."
        npm start &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to be ready with timeout
        echo "Waiting for server to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health >/dev/null 2>&1; then
            echo "Server is ready after $i attempts!"
            break
          fi
          echo "Attempt $i: Server not ready, waiting 2 seconds..."
          sleep 2
        done
        
        # Final verification
        if curl -f http://localhost:3000/health; then
          echo "✅ Server health check passed"
        else
          echo "❌ Server health check failed"
          exit 1
        fi
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          echo "Stopping server with PID: $SERVER_PID"
          kill $SERVER_PID 2>/dev/null || true
          rm server.pid
        fi
        # Cleanup any remaining processes
        pkill -f "node server.js" 2>/dev/null || true
        sleep 2
      if: always()

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level=moderate || {
          echo "⚠️ Security vulnerabilities found (moderate level)"
          echo "This is non-blocking for CI, but should be reviewed"
        }
        
        echo "Checking for high severity vulnerabilities..."
        if npm audit --audit-level=high; then
          echo "✅ No high severity vulnerabilities found"
        else
          echo "⚠️ High severity vulnerabilities detected!"
          echo "Please review and fix before production deployment"
        fi

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Verify server can start
      run: |
        echo "Testing server startup..."
        timeout 15s npm start &
        SERVER_PID=$!
        
        # Wait for server
        sleep 8
        
        # Test health endpoint
        if curl -f http://localhost:3000/health; then
          echo "✅ Server startup verification passed"
        else
          echo "❌ Server startup verification failed"
          exit 1
        fi
        
        # Cleanup
        kill $SERVER_PID 2>/dev/null || true
    
    - name: Create deployment artifact
      run: |
        echo "Creating deployment artifact..."
        tar -czf todo-app-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude=tests \
          --exclude='*.log' \
          --exclude='.github' \
          .
        echo "✅ Artifact created: todo-app-${{ github.sha }}.tar.gz"
        ls -lh todo-app-${{ github.sha }}.tar.gz
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: todo-app-build-${{ github.sha }}
        path: todo-app-${{ github.sha }}.tar.gz
        retention-days: 7