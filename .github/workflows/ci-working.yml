name: CI - Working Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Run frontend tests
      run: npm run test:frontend
    
    - name: Start server for E2E tests
      run: |
        echo "Starting server..."
        npm start &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to be ready
        echo "Waiting for server to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health >/dev/null 2>&1; then
            echo "Server is ready!"
            break
          fi
          echo "Attempt $i: Server not ready, waiting..."
          sleep 2
        done
        
        # Final check
        if ! curl -f http://localhost:3000/health; then
          echo "Server failed to start properly"
          exit 1
        fi
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          echo "Stopping server with PID: $SERVER_PID"
          kill $SERVER_PID || true
          rm server.pid
        fi
        # Kill any remaining node processes
        pkill -f "node server.js" || true
      if: always()
    
    - name: Generate coverage report
      run: npm test -- --coverage --coverageReporters=lcov
      if: matrix.node-version == '20.x'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "Running security audit..."
        npm audit --audit-level=moderate || {
          echo "Security vulnerabilities found, but continuing CI..."
          echo "Please review and fix security issues."
        }
    
    - name: Check for high severity vulnerabilities
      run: |
        echo "Checking for high severity vulnerabilities..."
        if npm audit --audit-level=high; then
          echo "No high severity vulnerabilities found."
        else
          echo "⚠️ High severity vulnerabilities detected!"
          echo "Please fix these before deploying to production."
          # Don't fail CI for now, but log the issue
        fi

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Test server startup
      run: |
        echo "Testing server startup..."
        timeout 10 npm start &
        SERVER_PID=$!
        sleep 5
        
        if curl -f http://localhost:3000/health; then
          echo "✅ Server starts successfully"
        else
          echo "❌ Server failed to start"
          exit 1
        fi
        
        kill $SERVER_PID || true
    
    - name: Create build artifact
      run: |
        echo "Creating build artifact..."
        tar -czf todo-app-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude='*.log' \
          .
        echo "Build artifact created: todo-app-${{ github.sha }}.tar.gz"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: todo-app-build-${{ github.sha }}
        path: todo-app-${{ github.sha }}.tar.gz
        retention-days: 7