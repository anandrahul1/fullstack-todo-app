name: Todo App - Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'aws-deployment/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'aws-deployment/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  APP_NAME: todo-app

jobs:
  validate:
    name: Validate Template
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          echo "🔍 Validating CloudFormation template..."
          aws cloudformation validate-template \
            --template-body file://aws-deployment/infrastructure.yml
          echo "✅ Template validation passed"

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name != 'pull_request' && 
      (github.event.inputs.action != 'destroy' || github.event.inputs.action == '' || github.event.inputs.action == 'deploy')
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set deployment variables
        run: |
          ENVIRONMENT="${{ needs.validate.outputs.environment }}"
          echo "STACK_NAME=${{ env.APP_NAME }}-${ENVIRONMENT}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

      - name: Deploy CloudFormation stack
        run: |
          echo "🚀 Deploying infrastructure to ${{ env.ENVIRONMENT }} environment..."
          echo "Stack name: ${{ env.STACK_NAME }}"
          
          aws cloudformation deploy \
            --template-file aws-deployment/infrastructure.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              AppName=${{ env.APP_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --tags \
              Project=${{ env.APP_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
              ManagedBy=GitHub-Actions \
              Repository=${{ github.repository }}

      - name: Get stack outputs
        id: outputs
        run: |
          echo "📋 Getting stack outputs..."
          
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryURI`].OutputValue' \
            --output text)
          
          DATA_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DataBucketName`].OutputValue' \
            --output text)
          
          ALB_DOMAIN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ALBDomainName`].OutputValue' \
            --output text)
          
          APP_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationURL`].OutputValue' \
            --output text)
          
          echo "ecr-uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "data-bucket=$DATA_BUCKET" >> $GITHUB_OUTPUT
          echo "alb-domain=$ALB_DOMAIN" >> $GITHUB_OUTPUT
          echo "app-url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## 🎉 Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Stack Name:** ${{ env.STACK_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Resources Created" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository:** ${{ steps.outputs.outputs.ecr-uri }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Data Bucket:** ${{ steps.outputs.outputs.data-bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL:** ${{ steps.outputs.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 AWS Console Links" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudFormation Stack](https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}#/stacks/stackinfo?stackId=${{ env.STACK_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- [ECS Cluster](https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [ECR Repository](https://console.aws.amazon.com/ecr/repositories?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Load Balancer](https://console.aws.amazon.com/ec2/v2/home?region=${{ env.AWS_REGION }}#LoadBalancers:)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Build and push Docker image to ECR" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy application to ECS" >> $GITHUB_STEP_SUMMARY
          echo "3. Test application at the ALB URL" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ needs.validate.outputs.environment }}-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Empty S3 bucket before deletion
        run: |
          ENVIRONMENT="${{ needs.validate.outputs.environment }}"
          STACK_NAME="${{ env.APP_NAME }}-${ENVIRONMENT}"
          
          echo "🗑️ Preparing to destroy infrastructure..."
          
          # Get data bucket name
          DATA_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DataBucketName`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          # Empty bucket if it exists
          if [ ! -z "$DATA_BUCKET" ]; then
            echo "Emptying data bucket: $DATA_BUCKET"
            aws s3 rm s3://$DATA_BUCKET --recursive || true
          fi

      - name: Delete CloudFormation stack
        run: |
          ENVIRONMENT="${{ needs.validate.outputs.environment }}"
          STACK_NAME="${{ env.APP_NAME }}-${ENVIRONMENT}"
          
          echo "🗑️ Deleting infrastructure stack: $STACK_NAME"
          
          aws cloudformation delete-stack \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "⏳ Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Infrastructure destroyed successfully"

  cost-estimate:
    name: Cost Estimate
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Generate cost estimate
        run: |
          echo "## 💰 Estimated Monthly Costs (PoC)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Estimated Cost |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ECS Fargate (1 task) | ~$15-25/month |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Load Balancer | ~$20/month |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Storage | ~$1-3/month |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudWatch Logs | ~$1-2/month |" >> $GITHUB_STEP_SUMMARY
          echo "| ECR Storage | ~$1/month |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **~$38-51/month** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Note:** This is a simplified PoC setup using default VPC and minimal resources." >> $GITHUB_STEP_SUMMARY